module.exports.config = {
 name: "call",
 version: "1.0.0",
 hasPermssion: 0,
 credits: "тАФ═Я═Я═Ю═ЮЁЭРВЁЭРШЁЭРБЁЭРДЁЭРС тШвя╕П_ЁЦгШ -ЁЭРБЁЭРОЁЭРУ тЪая╕П ЁЭС╗ЁЭСмЁЭСиЁЭС┤_ тШвя╕П", //don't change my credit 
 description: "ржХрж▓ ржмрзЛржорзНржмрж╛рж░, рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржирж╛ржорзНржмрж╛рж░рзЗрж░ ржЬржирзНржп",
 commandCategory: "Tool",
 usages: "/call 01xxxxxxxxx",
 cooldowns: 15,
 dependencies: { "axios": "" }
};
 
module.exports.run = async ({ api, event, args }) => {
 const axios = require('axios');
 const https = require('https');
 const number = args[0];
 const debug = args[1] === "debug";
 
 // Create axios instance with SSL verification disabled and timeout
 const axiosInstance = axios.create({
   httpsAgent: new https.Agent({ rejectUnauthorized: false }),
   timeout: 10000 // 10 second timeout to prevent hanging
 });
 
 if (!number || !/^01[0-9]{9}$/.test(number)) {
 return api.sendMessage("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи (ржЙржжрж╛рж╣рж░ржг: /call 01xxxxxxxxx) ржжржпрж╝рж╛ ржХрж░рзЗ ржХрзЗржЙ ржЦрж╛рж░рж╛ржк ржХрж╛ржЬрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛ ЁЯЩВ,\n ржлрж╛ржЗрж▓ржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржоржЬрж╛ ржХрж░рж╛рж░ ржЙржжрзНржжрзЗрж╢рзНржпрзЗ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n\nржбрж┐ржмрж╛ржЧ ржорзЛржбрзЗ ржЪрж╛рж▓рж╛рждрзЗ: /call 01xxxxxxxxx debug", event.threadID, event.messageID);
 }
 
 api.sendMessage(`ржХрж▓ ржмрзЛржорзНржмрж┐ржВ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ: ${number} ржиржорзНржмрж░рзЗ...ЁЯУЮЁЯТг\n ржХрж╛ржЙржХрзЗ ржмрж┐рж░ржХрзНржд ржХрж░рж╛рж░ ржЬржирзНржп ржПржЗ ржЯрзБрж▓ ржмрзНржпржмрж╣рж╛рж░ рж╕ржорзНржкрзВрж░рзНржг ржирж┐рж╖рж┐ржжрзНржз ржПржмржВ ржЖржЗржиржд ржЕржкрж░рж╛ржзред`, event.threadID, async (err, info) => {
 try {
  let response;
  
  // Try multiple API endpoints in sequence until one works
  let successfulEndpoint = "";
  try {
    // New primary endpoint
    response = await axiosInstance.get(`https://nextbomb.in/api/call?number=${number}`);
    successfulEndpoint = "nextbomb.in";
  } catch (primaryError) {
    try {
      // If primary fails, try first alternative API endpoint
      response = await axiosInstance.get(`https://callbomber.in/api/call?number=${number}`);
      successfulEndpoint = "callbomber.in";
    } catch (firstAlternativeError) {
      try {
        // If first alternative fails, try second alternative API endpoint
        response = await axiosInstance.get(`https://callbomber.co/api/call?number=${number}`);
        successfulEndpoint = "callbomber.co";
      } catch (secondAlternativeError) {
        try {
          // If second alternative fails, try third alternative API endpoint
          response = await axiosInstance.get(`https://www.callbomberz.in/api/call?phone=${number}`);
          successfulEndpoint = "callbomberz.in";
        } catch (thirdAlternativeError) {
          try {
            // If third alternative fails, try fourth alternative API endpoint
            response = await axiosInstance.get(`https://callbomberpro.shop/api/call?number=${number}`);
            successfulEndpoint = "callbomberpro.shop";
          } catch (fourthAlternativeError) {
            // If all endpoints fail, try one more with different parameter format
            response = await axiosInstance.get(`https://callbomber.co/api/call?mobile=${number}`);
            successfulEndpoint = "callbomber.co (mobile param)";
          }
        }
      }
    }
  }
  
  setTimeout(() => {
  api.unsendMessage(info.messageID);
  }, 90000);
 
 // Check if response contains success information
   let success = false;
   try {
     if (response && (response.data.success || response.status === 200)) {
       success = true;
     }
   } catch (parseError) {
     // If we can't determine success from response, assume it worked if we got here
     success = true;
   }
 
   if (debug) {
      // In debug mode, show detailed API response
      let debugInfo = `ЁЯФН ржбрж┐ржмрж╛ржЧ рждржерзНржп:\n`;
      debugInfo += `- рж╕ржлрж▓ ржПржирзНржбржкржпрж╝рзЗржирзНржЯ: ${successfulEndpoint || 'ржХрзЛржиржЯрж┐ржЗ ржХрж╛ржЬ ржХрж░рзЗржирж┐'}\n`;
      debugInfo += `- API рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ${response?.status || 'ржЕржЬрж╛ржирж╛'}\n`;
      debugInfo += `- API рж░рзЗрж╕ржкржирзНрж╕: ${JSON.stringify(response?.data || {}).substring(0, 200)}\n`;
      debugInfo += `- рж╕рж╛ржХрзНрж╕рзЗрж╕ ржлрзНрж▓рзНржпрж╛ржЧ: ${success ? 'рж╣рзНржпрж╛ржБ' : 'ржирж╛'}\n`;
      return api.sendMessage(debugInfo, event.threadID, event.messageID);
   } else if (success) {
      return api.sendMessage(`тЬЕ тАФ═Я═Я═Ю═ЮЁЭРВЁЭРШЁЭРБЁЭРДЁЭРС тШвя╕П_ЁЦгШ -ЁЭРБЁЭРОЁЭРУ ржХрж▓ ржмрзЛржорзНржмрж┐ржВ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ ${number} ржиржорзНржмрж░рзЗред\n\nржХрж▓ ржЖрж╕рждрзЗ рзз-рзи ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗ, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред${successfulEndpoint ? `\n\n(API: ${successfulEndpoint})` : ''}`, event.threadID, event.messageID);
   } else {
     return api.sendMessage(`тЪая╕П тАФ═Я═Я═Ю═ЮЁЭРВЁЭРШЁЭРБЁЭРДЁЭРС тШвя╕П_ЁЦгШ -ЁЭРБЁЭРОЁЭРУ ржХрж▓ ржмрзЛржорзНржмрж┐ржВ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржирж┐рж╢рзНржЪрж┐ржд ржиржпрж╝ ржпрзЗ ржХрж▓ ржкрзМржБржЫрзЗржЫрзЗ ржХрж┐ржирж╛ред ржХрж▓ ржЖрж╕рждрзЗ рзз-рзи ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗред`, event.threadID, event.messageID);
   }
 } catch (error) {
   if (debug) {
     // In debug mode, show detailed error information
     let debugError = `ЁЯФН ржбрж┐ржмрж╛ржЧ рждрзНрж░рзБржЯрж┐ рждржерзНржп:\n`;
     debugError += `- рждрзНрж░рзБржЯрж┐ ржкрзНрж░ржХрж╛рж░: ${error.name || 'ржЕржЬрж╛ржирж╛'}\n`;
     debugError += `- рждрзНрж░рзБржЯрж┐ ржмрж╛рж░рзНрждрж╛: ${error.message || 'ржХрзЛржи ржмрж╛рж░рзНрждрж╛ ржирзЗржЗ'}\n`;
     debugError += `- рж╕рзНржЯрзНржпрж╛ржХ ржЯрзНрж░рзЗрж╕: ${(error.stack || '').substring(0, 200)}\n`;
     debugError += `\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржЗ рждржерзНржп ржбрзЗржнрзЗрж▓ржкрж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржиред`;
     return api.sendMessage(debugError, event.threadID, event.messageID);
   } else {
     return api.sendMessage(`тЭМ рждрзНрж░рзБржЯрж┐: ржХрж▓ ржмрзЛржорзНржмрж┐ржВ рж╕ржорзНржкржирзНржи ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред рж╕ржорзНржнржмржд API рж╕рж╛рж░рзНржнрж╛рж░ржЧрзБрж▓рж┐ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛ред ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред\n\nржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждрзНрж░рзБржЯрж┐: ${error.message}\n\nржЖрж░рзЛ рждржерзНржпрзЗрж░ ржЬржирзНржп ржбрж┐ржмрж╛ржЧ ржорзЛржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: /call ${number} debug`, event.threadID, event.messageID);
   }
  }
 });
};
